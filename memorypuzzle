import sys

import random
import pygame
from pygame.locals import *

FPS = 30 # frames per second, the general speed of the program
WINDOWWIDTH = 640 # width of the program
WINDOWHEIGHT = 480 # height of the program
REVEALSPEED = 8 # speed boxes sliding
BOXSIZE = 40 # size of box height and width in pixels
GAPSIZE = 10 # gap between boxes in pixels
BOARDWIDTH = 10 # number of columns
BOARDHEIGHT = 7 # number of rows
assert(BOARDWIDTH * BOARDHEIGHT) % 2 == 0, 'Board needs to have an even number of boxes for pairs of matches.'
XMARGIN = int((WINDOWWIDTH - (BOARDWIDTH * (BOXSIZE + GAPSIZE))) / 2)
YMARGIN = int((WINDOWHEIGHT - (BOARDHEIGHT * (BOXSIZE + GAPSIZE))) / 2)

#        R   G    B
GRAY = (100, 100, 100)
NAVYBLUE = ( 60, 60, 100)
WHITE = (255, 255, 255)
RED = (255, 0, 0)
GREEN = ( 0, 255, 0)
BLUE = ( 0, 0, 255)
YELLOW = (255, 255, 0)
ORANGE = (255, 128, 0)
PURPLE = (255, 0, 255)
CYAN = ( 0, 255, 255)

BGCOLOR = NAVYBLUE
LIGHTBGCOLOR = GRAY
BOXCOLOR = WHITE
HIGHLIGHTCOLOR = BLUE

DONUT = 'donut'
SQUARE = 'square'
DIAMOND = 'diamond'
LINES = 'lines'
OVAL = 'oval'

ALLCOLORS = (RED, GREEN, BLUE, YELLOW, ORANGE, PURPLE, CYAN)
ALLSHAPES = (DONUT, SQUARE, DIAMOND, LINES, OVAL)
assert len(ALLCOLORS) * len(ALLSHAPES) * 2 >= BOARDWIDTH * BOARDHEIGHT, "board is too big for the number of shapes/colors defined"

def main():
  global FPSCLOCK, DISPLAYSURF
  pygame.init()
  FPSCLOCK = pygame.time.Clock()
  DISPLAYSURF = pygame.display.set_mode((WINDOWWIDTH, WINDOWHEIGHT))

  mousex = 0 #used to store x coordinate of mouse event
  mousey = 0 #used to store y coordinate of mouse event
  pygame.display.set_caption('Memory Game')

  mainBoard = getRandomizedBoard()
  revealedBoxes = generateRevealedBoxesData(False)

  firstSelection = None #stores the x,y of first box clicked

  DISPLAYSURF.fill(BGCOLOR)
  startGameAnimation(mainBoard)

  while True: #main game loop
    mouseClicked = False

    DISPLAYSURF.fill(BGCOLOR) #drawing the window
    drawBoard(mainBoard, revealedBoxes)

    for event in pygame.event.get(): #event handling window
      if event.type == QUIT or (event.type == KEYUP and event.key == K_ESCAPE):
        pygame.quit()
        sys.exit()
      elif event.type == MOUSEMOTION:
        mousex, mousey = event.pos
      elif event.type == MOUSEBUTTONUP:
        mousex, mousey = event.pos
        mouseClicked = True

    boxx, boxy = getBoxAtPixel(mousex, mousey)
    if boxx != None and boxy != None:
    #the mouse is currently over a box
        if not revealedBoxes[boxx] [boxy]:
          drawHighlightBox(boxx, boxy)
        if not revealedBoxes[boxx][boxy] and mouseClicked:
          revealBoxesAnimation(mainBoard, [(boxx, boxy)])
          revealedBoxes[boxx][boxy] = True # set the box as 'revealed'

          if firstSelection == None: #current box is first one clicked
            firstSelection = (boxx, boxy)
          else:#current box is 2nd one clicked, check if match.
            icon1shape, icon1color = getShapeAndColor(mainBoard, firstSelection[0], firstSelection[1])
            icon2shape, icon2color = getShapeAndColor(mainBoard, boxx, boxy)

            if icon1shape != icon2shape or icon1color != icon2color:
            #icons don't match
              pygame.time.wait(1000) #1000 milliseconds = 1 second
              coverBoxesAnimation(mainBoard, [(firstSelection[0], firstSelection[1]), (boxx, boxy)])
              revealedBoxes[firstSelection[0]][firstSelection[1]] = False
              revealedBoxes[boxx][boxy] = False
            elif hasWon(revealedBoxes): #CHECK IF ALL PAIRS FOUND
              gameWonAnimation(mainBoard)
              pygame.time.wait(2000)

            #reset the board

            mainBoard = getRadomizedBoard()
            revealedBoxes = generateRevealedBoxesData(False)

            #show the fully unveiled board for a second
            drawBoard(mainBoard, revealedBoxes)
            pygame.display.update()
            pygame.time.wait(1000)

            #Replay start game animation
            startGameAnimation(mainBoard)
          firstSelection = None #reset firstSelectionVariable

    #Redraw the screen and wait a clock tick
    pygame.display.update()
  FPSCLOCK.tick(FPS)
  
def generateRevealedBoxesData(val):
  revealedBoxes = []
  for i in range(BOARDWIDTH):
    revealedBoxes.append([val] * BOARDHEIGHT)
  return revealedBoxes

def getRandomizedBoard():
  #get a list of every possible shape/colors
  icons = []
  for color in ALLCOLORS:
    for shape in ALLSHAPES:
      icons.append( (shape, color))


  random.shuffle(icons) #randomize the order of icons
  numIconsUsed = int(BOARDWIDTH * BOARDHEIGHT / 2) #CALCLATE NO OF ICONS NEEDED
  icons = icons[:numIconsUsed] * 2 #make two
  random.shuffle(icons)

#create the board data structure with random icons
  board = []
  for x in range(BOARDWIDTH):
    column = []
    for y in range(BOARDHEIGHT):
      column.append(icons[0])
      del icons[0]# remove icons as they are assigned
    board.append(column)
  return board

def splitIntoGroupsOf(groupSize, theList):
  #splits a list into a list of lists of size groupSize
  result = []
  for i in range(0, len(theList), groupSize):
    result.append(theList[i:i + groupSize])
    return result

def leftTopCoordsOfBox(boxx, boxy):
  #convert board coordinates into pixel coordinates
  left = boxx * (BOXSIZE + GAPSIZE) + XMARGIN
  top = boxy * (BOXSIZE + GAPSIZE) + YMARGIN
  return (left, top)

def getBoxAtPixel(x, y):
  for boxx in range(BOARDWIDTH):
    for boxy in range(BOARDHEIGHT):
      left, top = leftTopCoordsOfBox(boxx, boxy)
      boxRect = pygame.Rect(left, top, BOXSIZE, BOXSIZE)
      if boxRect.collidepoint(x, y):
        return (boxx, boxy)
  return(None, None)

def drawIcon(shape, color, boxx, boxy, revealed):
    quarter = int(BOXSIZE * 0.25) #syntactic sugar
    half =    int(BOXSIZE * 0.5) #as above

    left, top = leftTopCoordsOfBox(boxx, boxy) #get pixel coords from board coords
  #draw the shapes

    if shape == DONUT:
      pygame.draw.circle(DISPLAYSURF, color, (left + half, top + half), half - 5)
      pygame.draw.circle(DISPLAYSURF, BGCOLOR, (left + half, top + half), quarter - 5)
    elif shape == SQUARE:
      pygame.draw.rect(DISPLAYSURF, color, (left + quarter, top + quarter, BOXSIZE - half, BOXSIZE - half))
    elif shape == DIAMOND:
      pygame.draw.polygon(DISPLAYSURF, color, ((left + half, top), (left + BOXSIZE - 1, top + half), (left + half, top + BOXSIZE - 1), (left, top + half)))
    elif shape == LINES: 
      for i in range(0, BOXSIZE, 4):
        pygame.draw.line(DISPLAYSURF, color, (left, top + i), (left + i, top))
    elif shape == OVAL:
      pygame.draw.ellipse(DISPLAYSURF, color, (left, top + quarter, BOXSIZE, half))

def getShapeAndColor(board, boxx, boxy):
  #SHAPE value for x , y spot is stored in board
  return board[boxx][boxy][0], board[boxx][boxy][1]

def drawBoxCovers(board, boxes, coverage):
  #draws boxes being covered/revealed. boxes is a list, of two item
  #lists, which have the x & y spot of the box
  for box in boxes:
    left, top = leftTopCoordsOfBox(box[0], box[1])
    pygame.draw.rect(DISPLAYSURF, BGCOLOR, (left, top, BOXSIZE, BOXSIZE))

    shape, color = getShapeAndColor(board, box[0], box[1])
    drawIcon(shape, color, box[0], box[1], True)
    if coverage > 0: #only draw the cover if there is coverage
      pygame.draw.rect(DISPLAYSURF, BOXCOLOR, (left, top, coverage, BOXSIZE))
      pygame.display.update()
      FPSCLOCK.tick(FPS)


def revealBoxesAnimation(board, boxesToReveal):
  #box reveal animation
  for coverage in range(0, BOXSIZE + REVEALSPEED, REVEALSPEED):
    drawBoxCovers(board, boxesToReveal, coverage)

def coverBoxesAnimation(board, boxesToCover):
  #do box cover animation
  for coverage in range(0, BOXSIZE + REVEALSPEED, REVEALSPEED):
    drawBoxCovers(board, boxesToCover, coverage)
  

def drawBoard(board, revealed):
  #draws all of the boxes in their revealed state
  for boxx in range(BOARDWIDTH):
    for boxy in range(BOARDHEIGHT):
      left, top = leftTopCoordsOfBox(boxx, boxy)
      if not revealed[boxx][boxy]:
        #draw a covered box
        pygame.draw.rect(DISPLAYSURF, BOXCOLOR, (left, top, BOXSIZE, BOXSIZE))
      else:
        #draw the revealed box
        shape, color = getShapeAndColor(board, boxx, boxy)
        drawIcon(shape, color, boxx, boxy, revealed)


def drawHighlightBox(boxx, boxy):
  left, top = leftTopCoordsOfBox(boxx, boxy)
  pygame.draw.rect(DISPLAYSURF, HIGHLIGHTCOLOR, (left - 5, top - 5, BOXSIZE + 10, BOXSIZE + 10), 4)


def startGameAnimation(board):
  #randomly reveal boxes 8 at a time
  coveredBoxes = generateRevealedBoxesData(False)
  boxes = []
  for x in range(BOARDWIDTH):
    for y in range(BOARDHEIGHT):
      boxes.append( (x,y) )
  random.shuffle(boxes)
  boxGroups = splitIntoGroupsOf(8, boxes)

  drawBoard(board, coveredBoxes)
  for boxGroup in boxGroups:
    revealBoxesAnimation(board, boxGroup)
    coverBoxesAnimation(board, boxGroup)


def gameWonAnimation(board):
  #flash the background colour when the game is won
  coveredBoxes = generateRevealedBoxesData(True)
  color1 = LIGHTBGCOLOR
  color2 = BGCOLOR

  for i in range(13):
    color1, color2 = color2, color1 #swap colours
    DISPLAYSURF.fill(color1)
    drawBoard(board, coveredBoxes)
    pygame.display.update()
    pygame.time.wait(300)

def hasWon(revealedBoxes):
  #revealed True if all boxes have been revealed
  for i in revealedBoxes:
    if False in i:
      return False #return false if any boxes are covered
  return True


if __name__ == '__main__':
  main()
      
